# -*- coding: utf-8 -*-
"""Twitter_Sentiment_Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/102hb8NNxvpvF8AAExBHgYp9LytewRIHe
"""

! pip install kaggle

"""configuring the path for kaggle.json file"""

! mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

"""Importing twitter sentiment analysis"""

#API to fetch dataset from kaggle
! kaggle datasets download -d kazanova/sentiment140

#extracting the compressed dataset

from zipfile import ZipFile
dataset='/content/sentiment140.zip'

with ZipFile(dataset,'r') as zip:
  zip.extractall()
  print('The dataset is extracted')

"""Importing the dependencies"""

import numpy as np
import pandas as pd
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

import nltk
nltk.download('stopwords')

#printing stopwords in english
print(stopwords.words('english'))

#loading the data from csv file to pandas dataframe
twitter_data=pd.read_csv('/content/training.1600000.processed.noemoticon.csv',encoding='ISO-8859-1')

#checking the number of rows and column
twitter_data.shape

#printing the first 5 rows of the data frame
twitter_data.head()

#naming the column and reading the dataset again

column_names=['target','id','date','flag','user','text']
twitter_data=pd.read_csv('/content/training.1600000.processed.noemoticon.csv',names=column_names,encoding='ISO-8859-1')

twitter_data.shape

twitter_data.head()

#counting the number of missing values in the dataset
twitter_data.isnull().sum()

#ckecking the distribution of target column
twitter_data['target'].value_counts()

"""convert the target "4" to "1"
"""

twitter_data.replace({'target':{4:1}},inplace=True)

twitter_data['target'].value_counts()

"""0 ---> negative tweet

1 ---> positive tweet

**Stemming**

Stemming is the process to reduce a word to its root word

ex: actress,actor,acting=act
"""

port_stem=PorterStemmer()

def stemming(content):

  stemmed_content = re.sub('^a-zA-Z',' ',content )
  stemmed_content = stemmed_content.lower()
  stemmed_content = stemmed_content.split()
  stemmed_content = [port_stem.stem(word) for word in stemmed_content if not word in stopwords.words('english')]
  stemmed_content = ' '.join(stemmed_content)

  return stemmed_content

twitter_data['stemmed_content'] = twitter_data['text'].apply(stemming)

twitter_data.head()

print(twitter_data['stemmed_content'])

print(twitter_data['target'])

#seperating data and label
X=twitter_data['stemmed_content'].values
Y=twitter_data['target'].values

print(X)

print(Y)

"""Splitting the data to traning and test Data"""

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

print(X_train)

print(X_test)

#converting the textual data to numerical data

vectorizer = TfidfVectorizer()

X_train = vectorizer.fit_transform(X_train)
X_test = vectorizer.transform(X_test)

print(X_train)

print(X_test)

"""Training the Machine Learning Model

LOGISTIC REGRESSION
"""

model = LogisticRegression(max_iter=1000)

model.fit(X_train,Y_train)

"""Model Evaluation

Accuracy Score


"""

#acccuracy score on the training data

X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(Y_train,X_train_prediction)

print('accuracy score on the training data : ', training_data_accuracy)

#acccuracy score on the test data

X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(Y_test,X_test_prediction)

print('accuracy score on the test data : ', test_data_accuracy)

"""Model accuracy = 78.2%

Saving the trained model
"""

import pickle

filename = 'trained_model.sav'
pickle.dump(model,open(filename,'wb'))

"""Using saved model for future prediction"""

#loading the saved model

loaded_model = pickle.load(open('/content/trained_model.sav', 'rb'))

X_new = X_test[200]
print(Y_test[200])

prediction= model.predict(X_new)
print(prediction)

if(prediction[0] == 0):
  print('Negative Tweet')
else:
  print('positive tweet')

X_new = X_test[5]
print(Y_test[5])

prediction= model.predict(X_new)
print(prediction)

if(prediction[0] == 0):
  print('Negative Tweet')
else:
  print('positive tweet')

